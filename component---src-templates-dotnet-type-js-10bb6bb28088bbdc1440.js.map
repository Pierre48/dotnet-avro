{"version":3,"sources":["webpack:///./src/components/dotnet/inheritance-table.js","webpack:///./src/components/dotnet/inheritance-table.module.scss","webpack:///./src/components/dotnet/member-table.js","webpack:///./src/components/dotnet/type-detail.js","webpack:///./src/templates/dotnet-type.js"],"names":["member","object","type","assembly","base","interfaces","namespace","signature","typeSignatures","memberSignatures","find","s","language","typeParameters","map","p","name","className","styles","table","id","value","length","index","key","rowSpan","module","exports","members","overloads","overload","methodTypeParameters","kind","returns","xml","summary","remarks","groupBy","constructors","get","fields","properties","methods","query","dotnetType","data","Helmet","to","title"],"mappings":"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","file":"component---src-templates-dotnet-type-js-10bb6bb28088bbdc1440.js","sourcesContent":["import React from 'react'\n\nimport Highlight from '../code/highlight'\nimport DotnetReference from '../references/dotnet'\n\nimport styles from './inheritance-table.module.scss'\n\nexport default ({ member, type }) => {\n  const object = type || member\n\n  const { assembly, base, interfaces, namespace } = object\n  const signature = (object.typeSignatures || object.memberSignatures || []).find(s => s.language === 'C#')\n  const typeParameters = (object.typeParameters || []).map(p => p.name)\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {assembly &&\n          <tr>\n            <th>Assembly</th>\n            <td>\n              <DotnetReference id={assembly.id} />\n            </td>\n          </tr>\n        }\n\n        {namespace &&\n          <tr>\n            <th>Namespace</th>\n            <td>\n              <DotnetReference id={namespace.id} />\n            </td>\n          </tr>\n        }\n\n        {signature &&\n          <tr>\n            <th>Signature</th>\n            <td>\n              <Highlight language='csharp'>{signature.value}</Highlight>\n            </td>\n          </tr>\n        }\n\n        {base &&\n          <tr>\n            <th>Base</th>\n            <td>\n              <DotnetReference id={base} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        }\n\n        {interfaces && interfaces.length > 0 && interfaces.map((id, index) =>\n          <tr key={index}>\n            {index === 0 &&\n              <th rowSpan={interfaces.length}>Interfaces</th>\n            }\n            <td>\n              <DotnetReference id={id} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"inheritance-table-module--table--1QN2q\"};","import React, { Fragment } from 'react'\n\nimport XmlDoc from '../dotnet/xml-doc'\nimport DotnetReference from '../references/dotnet'\n\nexport default ({ members, typeParameters }) => {\n  typeParameters = (typeParameters || []).map(p => p.name)\n\n  return members.length > 0 && members.map(member =>\n    <Fragment key={member.id}>\n      {member.overloads.map(overload => {\n        const methodTypeParameters = member.kind === 'method' && overload.typeParameters\n          ? overload.typeParameters.map(p => p.name)\n          : null\n\n        return (\n          <Fragment key={overload.id}>\n            <h5>\n              {overload.returns &&\n                <><DotnetReference id={overload.returns.type} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} /> </>\n              }\n\n              <DotnetReference id={overload.id} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} />\n            </h5>\n            <XmlDoc xml={overload.summary} />\n          </Fragment>\n        )\n      })}\n    </Fragment>\n  )\n}\n","import React from 'react'\n\nimport InheritanceTable from './inheritance-table'\nimport MemberTable from './member-table'\nimport XmlDoc from './xml-doc'\n\nimport { groupBy } from '../../../utilities/array'\n\nexport default ({ type }) => {\n  const { remarks, summary, typeParameters } = type\n\n  const members = groupBy((type.members || []), 'kind')\n  const constructors = members.get('constructor')\n  const fields = members.get('field')\n  const properties = members.get('property')\n  const methods = members.get('method')\n\n  return (\n    <>\n      {summary &&\n        <XmlDoc xml={summary} />\n      }\n\n      <InheritanceTable type={type} />\n\n      {remarks &&\n        <XmlDoc xml={remarks} />\n      }\n\n      {constructors &&\n        <>\n          <h3>Constructors</h3>\n          <MemberTable members={constructors} typeParameters={typeParameters} />\n        </>\n      }\n\n      {fields &&\n        <>\n          <h3>Fields</h3>\n          <MemberTable members={fields} typeParameters={typeParameters} />\n        </>\n      }\n\n      {properties &&\n        <>\n          <h3>Properties</h3>\n          <MemberTable members={properties} typeParameters={typeParameters} />\n        </>\n      }\n\n      {methods &&\n        <>\n          <h3>Methods</h3>\n          <MemberTable members={methods} typeParameters={typeParameters} />\n        </>\n      }\n    </>\n  )\n}\n","import { Link, graphql } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport TypeDetail from '../components/dotnet/type-detail'\nimport DotnetReference from '../components/references/dotnet'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport styles from './dotnet.module.scss'\n\nexport default ({ data: { dotnetType }}) => {\n  const { kind, name, namespace } = dotnetType\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${name} ${kind}`}</title>\n      </Helmet>\n\n      <Breadcrumb>\n        <Link to='/api'>API reference</Link>\n        <DotnetReference id={namespace.id}>\n          <code>{namespace.name}</code> namespace\n        </DotnetReference>\n      </Breadcrumb>\n\n      <h1 className={styles.title}>\n        <code>{name}</code> {kind}\n      </h1>\n\n      <TypeDetail type={dotnetType} />\n    </>\n  )\n}\n\nexport const query = graphql`\n  query DotnetTypeDetailQuery($id: String!) {\n    dotnetType(id: { eq: $id }) {\n      base\n      kind\n      interfaces\n      name\n      remarks\n      summary\n      assembly {\n        id\n      }\n      members {\n        id\n        kind\n        name\n        overloads {\n          id\n          returns {\n            summary\n            type\n          }\n          summary\n          typeParameters {\n            name\n          }\n        }\n      }\n      namespace {\n        id\n        name\n      }\n      typeParameters {\n        name\n      }\n      typeSignatures {\n        language\n        value\n      }\n    }\n  }\n`\n"],"sourceRoot":""}