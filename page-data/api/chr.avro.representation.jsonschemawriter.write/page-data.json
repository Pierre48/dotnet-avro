{"componentChunkName":"component---src-templates-dotnet-member-js","path":"/api/chr.avro.representation.jsonschemawriter.write","result":{"data":{"dotnetMember":{"id":"M:Chr.Avro.Representation.JsonSchemaWriter.Write","kind":"method","name":"Write","overloads":[{"id":"M:Chr.Avro.Representation.JsonSchemaWriter.Write(Chr.Avro.Abstract.Schema,System.Boolean,System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema})","base":"M:Chr.Avro.Representation.IJsonSchemaWriter.Write(Chr.Avro.Abstract.Schema,System.Boolean,System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema})","exceptions":[{"summary":"Thrown when a schema constraint prevents a valid schema from being\n            written.","type":"T:Chr.Avro.Abstract.InvalidSchemaException"},{"summary":"Thrown when no matching case is found for the schema.","type":"T:Chr.Avro.UnsupportedSchemaException"}],"memberSignatures":[{"language":"C#","value":"public virtual string Write (Chr.Avro.Abstract.Schema schema, bool canonical = false, System.Collections.Concurrent.ConcurrentDictionary<string,Chr.Avro.Abstract.NamedSchema> names = null);"},{"language":"ILAsm","value":".method public hidebysig newslot virtual instance string Write(class Chr.Avro.Abstract.Schema schema, bool canonical, class System.Collections.Concurrent.ConcurrentDictionary`2<string, class Chr.Avro.Abstract.NamedSchema> names) cil managed"}],"parameters":[{"name":"schema","summary":"The schema to write.","type":"T:Chr.Avro.Abstract.Schema"},{"name":"canonical","summary":"Whether the schema should be written in Parsing Canonical Form (i.e., built without\n            nonessential attributes).","type":"T:System.Boolean"},{"name":"names","summary":"An optional schema cache. The cache is populated as the schema is written and can be\n            used to determine which named schemas have already been processed.","type":"T:System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema}"}],"remarks":null,"returns":{"summary":"Returns a JSON-encoded schema.","type":"T:System.String"},"summary":"Writes a serialized Avro schema.","typeParameters":null},{"id":"M:Chr.Avro.Representation.JsonSchemaWriter.Write(Chr.Avro.Abstract.Schema,System.IO.Stream,System.Boolean,System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema})","base":"M:Chr.Avro.Representation.ISchemaWriter.Write(Chr.Avro.Abstract.Schema,System.IO.Stream,System.Boolean,System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema})","exceptions":[{"summary":"Thrown when a schema constraint prevents a valid schema from being\n            written.","type":"T:Chr.Avro.Abstract.InvalidSchemaException"},{"summary":"Thrown when no matching case is found for the schema.","type":"T:Chr.Avro.UnsupportedSchemaException"}],"memberSignatures":[{"language":"C#","value":"public virtual void Write (Chr.Avro.Abstract.Schema schema, System.IO.Stream stream, bool canonical = false, System.Collections.Concurrent.ConcurrentDictionary<string,Chr.Avro.Abstract.NamedSchema> names = null);"},{"language":"ILAsm","value":".method public hidebysig newslot virtual instance void Write(class Chr.Avro.Abstract.Schema schema, class System.IO.Stream stream, bool canonical, class System.Collections.Concurrent.ConcurrentDictionary`2<string, class Chr.Avro.Abstract.NamedSchema> names) cil managed"}],"parameters":[{"name":"schema","summary":"The schema to write.","type":"T:Chr.Avro.Abstract.Schema"},{"name":"stream","summary":"The stream to write the schema to. (The stream will not be disposed.)","type":"T:System.IO.Stream"},{"name":"canonical","summary":"Whether the schema should be written in Parsing Canonical Form (i.e., built without\n            nonessential attributes).","type":"T:System.Boolean"},{"name":"names","summary":"An optional schema cache. The cache is populated as the schema is written and can be\n            used to determine which named schemas have already been processed.","type":"T:System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema}"}],"remarks":null,"returns":{"summary":"Returns a JSON-encoded schema.","type":"T:System.Void"},"summary":"Writes a serialized Avro schema.","typeParameters":null},{"id":"M:Chr.Avro.Representation.JsonSchemaWriter.Write(Chr.Avro.Abstract.Schema,System.Text.Json.Utf8JsonWriter,System.Boolean,System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema})","base":"M:Chr.Avro.Representation.IJsonSchemaWriter.Write(Chr.Avro.Abstract.Schema,System.Text.Json.Utf8JsonWriter,System.Boolean,System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema})","exceptions":[{"summary":"Thrown when a schema constraint prevents a valid schema from being\n            written.","type":"T:Chr.Avro.Abstract.InvalidSchemaException"},{"summary":"Thrown when no matching case is found for the schema.","type":"T:Chr.Avro.UnsupportedSchemaException"}],"memberSignatures":[{"language":"C#","value":"public virtual void Write (Chr.Avro.Abstract.Schema schema, System.Text.Json.Utf8JsonWriter json, bool canonical = false, System.Collections.Concurrent.ConcurrentDictionary<string,Chr.Avro.Abstract.NamedSchema> names = null);"},{"language":"ILAsm","value":".method public hidebysig newslot virtual instance void Write(class Chr.Avro.Abstract.Schema schema, class System.Text.Json.Utf8JsonWriter json, bool canonical, class System.Collections.Concurrent.ConcurrentDictionary`2<string, class Chr.Avro.Abstract.NamedSchema> names) cil managed"}],"parameters":[{"name":"schema","summary":"The schema to write.","type":"T:Chr.Avro.Abstract.Schema"},{"name":"json","summary":"The writer to use for JSON operations.","type":"T:System.Text.Json.Utf8JsonWriter"},{"name":"canonical","summary":"Whether the schema should be written in Parsing Canonical Form (i.e., built without\n            nonessential attributes).","type":"T:System.Boolean"},{"name":"names","summary":"An optional schema cache. The cache is populated as the schema is written and can be\n            used to determine which named schemas have already been processed.","type":"T:System.Collections.Concurrent.ConcurrentDictionary{System.String,Chr.Avro.Abstract.NamedSchema}"}],"remarks":null,"returns":{"summary":"Returns a JSON-encoded schema.","type":"T:System.Void"},"summary":"Writes a serialized Avro schema.","typeParameters":null}],"type":{"id":"T:Chr.Avro.Representation.JsonSchemaWriter","kind":"class","name":"JsonSchemaWriter","namespace":{"id":"N:Chr.Avro.Representation","name":"Chr.Avro.Representation"},"typeParameters":null}}},"pageContext":{"id":"M:Chr.Avro.Representation.JsonSchemaWriter.Write"}},"staticQueryHashes":["2742782950","828541920"]}