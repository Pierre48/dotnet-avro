{"version":3,"sources":["webpack:///./src/pages/guides/cli-generate.js"],"names":["title","useStaticQuery","site","siteMetadata","latestRelease","projectName","language","to","inline"],"mappings":"2FAAA,gFAOMA,EAAQ,uCAEC,qBAAO,IAAD,EAKfC,YAAe,cAHjBC,KACEC,aAAgBC,EAHD,EAGCA,cAAeC,EAHhB,EAGgBA,YAanC,OACE,oCACE,kBAAC,IAAD,KACE,+BAAQL,IAGV,4BAAKA,GACL,2BAAIK,EAAJ,sNAEA,+CACA,kEAAwCA,EAAxC,SACA,kBAAC,IAAD,CAAWC,SAAS,QAApB,8EAC0BF,EAD1B,kCAEA,6FAAkE,6CAAlE,gFAAuK,kBAAC,IAAD,CAAcG,GAAG,yCAAjB,iBAAvK,eAEA,6CACA,qEAA0C,kBAAC,IAAD,CAAMA,GAAG,iBAAgB,kBAAC,IAAD,CAAWC,QAAM,EAACF,SAAS,QAA3B,aAAnE,kEAA+L,kBAAC,IAAD,CAAcC,GAAG,uDAAjB,mBAA/L,KACA,kBAAC,IAAD,CAAWD,SAAS,QAApB,2PAUA,mEAAwC,kBAAC,IAAD,CAAcC,GAAG,2EAAjB,WAAxC,mGACA,kBAAC,IAAD,CAAWD,SAAS,QAAQ,iEAC5B,iDACA,kBAAC,IAAD,CAAWA,SAAS,cAAc,mGAElC","file":"component---src-pages-guides-cli-generate-js-d3f47ca4031382ddbbca.js","sourcesContent":["import { Link, graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../../components/code/highlight'\nimport ExternalLink from '../../components/site/external-link'\n\nconst title = 'Generating C# code from Avro schemas'\n\nexport default () => {\n  const {\n    site: {\n      siteMetadata: { latestRelease, projectName }\n    }\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          latestRelease\n          projectName\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n\n      <h1>{title}</h1>\n      <p>{projectName} is capable of generating rudimentary C# class and enum definitions to match Avro’s record and enum schemas. If you have a complex Avro schema, but no matching .NET type, code generation can save a lot of time.</p>\n\n      <h2>Getting started</h2>\n      <p>If you haven’t already, install the {projectName} CLI:</p>\n      <Highlight language='bash'>{`$ dotnet tool install Chr.Avro.Cli --global\nTool 'chr.avro.cli' (version '${latestRelease}') was successfully installed.`}</Highlight>\n      <p>After the CLI tool has been installed, you can invoke it using <code>dotnet avro</code>. If the install command fails, make sure you have the latest version of the <ExternalLink to='https://dotnet.microsoft.com/download'>.NET Core SDK</ExternalLink> installed.</p>\n\n      <h2>Using the CLI</h2>\n      <p>To generate code for a schema, use the <Link to='/cli#generate'><Highlight inline language='bash'>generate</Highlight></Link> command. The CLI supports retrieving schemas from a Confluent <ExternalLink to='https://www.confluent.io/confluent-schema-registry/'>Schema Registry</ExternalLink>:</p>\n      <Highlight language='bash'>{`$ dotnet avro generate --id 42 --registry-url http://registry:8081\nnamespace ExampleNamespace\n{\n    public class ExampleClass\n    {\n        public long LongProperty { get; set; }\n\n        public string StringProperty { get; set; }\n    }\n}`}</Highlight>\n      <p>The CLI writes generated code to the <ExternalLink to='https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)'>console</ExternalLink>. Use your shell’s capabilities to read from and write to files. In Bash, that looks like this:</p>\n      <Highlight language='bash'>{'$ dotnet avro generate < example-class.avsc > ExampleClass.cs'}</Highlight>\n      <p>And in PowerShell:</p>\n      <Highlight language='powershell'>{'PS C:\\\\> Get-Content .\\\\example-class.avsc | dotnet avro generate | Out-File .\\\\ExampleClass.cs'}</Highlight>\n\n      <p>Generated enums and classes are grouped by namespace.</p>\n    </>\n  )\n}\n"],"sourceRoot":""}