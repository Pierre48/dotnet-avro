{"version":3,"sources":["webpack:///./src/components/benchmarks/benchmarks-table.js","webpack:///./src/pages/internals/benchmarks.js","webpack:///./src/components/benchmarks/benchmarks-table.module.scss"],"names":["suites","libraries","useMemo","map","Map","results","result","has","library","id","set","Array","from","values","sort","a","b","name","localeCompare","grid","suite","rows","row","find","r","component","iterations","length","fill","push","index","findIndex","l","averageValue","times","reduce","toLowerCase","toLocaleString","useGrouping","colSpan","rowSpan","className","styles","column","key","iterationCount","missing","toFixed","title","useStaticQuery","allBenchmarkSuite","nodes","site","siteMetadata","githubUrl","projectName","Helmet","to","module","exports"],"mappings":"6+BAIe,kBAAiB,IAAdA,EAAa,EAAbA,OACVC,EAAYC,mBAAQ,WAGxB,IAFA,IAEA,EAFMC,EAAM,IAAIC,IAEhB,IAAoBJ,KAApB,aACE,IAD2B,IAC3B,MAD0B,QACCK,WAA3B,aAAoC,CAAC,IAA1BC,EAAyB,QAC7BH,EAAII,IAAID,EAAOE,QAAQC,KAC1BN,EAAIO,IAAIJ,EAAOE,QAAQC,GAAIH,EAAOE,SAKxC,OAAOG,MAAMC,KAAKT,EAAIU,UACnBC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,cAAcF,EAAEC,WACxC,CAACjB,IAEEmB,EAAOjB,mBAAQ,kBAAMF,EAAOG,KAAI,SAAAiB,GAGpC,IAFA,IAEA,EAFMC,EAAO,GADgC,iBAGlCf,EAHkC,QAIvCgB,EAAMD,EAAKE,MAAK,SAAAC,GAAC,OACnBA,EAAEC,YAAcnB,EAAOmB,WACvBD,EAAEE,aAAepB,EAAOoB,cAGrBJ,IACHA,EAAM,CACJG,UAAWnB,EAAOmB,UAClBC,WAAYpB,EAAOoB,WACnBrB,QAAS,IAAIM,MAAMV,EAAU0B,QAAQC,KAAK,OAG5CP,EAAKQ,KAAKP,IAGZ,IAAMQ,EAAQ7B,EAAU8B,WAAU,SAAAC,GAAC,OAAIA,EAAEvB,KAAOH,EAAOE,QAAQC,MAE3DqB,GAAS,IACXR,EAAIjB,QAAQyB,GAAS,CACnBG,aAAc3B,EAAO4B,MAAMC,QAAO,SAACpB,EAAGC,GAAJ,OAAUD,EAAIC,KAAKV,EAAO4B,MAAMP,OAClEd,OAAQP,EAAO4B,SArBrB,IAAqBd,EAAMf,WAA3B,aAAqC,IA0BrC,MAAO,CACLgB,KAAMA,EACHlB,KAAI,SAAAmB,GAAG,wBACHA,EADG,CAENG,UAAWH,EAAIG,UAAUW,cACzBV,WAAYJ,EAAII,WAAWW,eAAe,CACxCC,aAAa,SAGhBxB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEU,UAAUP,cAAcF,EAAES,cAC9CL,YAEDN,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,MAAMH,KAAKC,cAAcF,EAAEI,MAAMH,WAAQ,CAAChB,EAAWD,IAEzE,OACE,+BACE,+BACE,4BACE,wBAAIuC,QAAS,EAAGC,QAAS,GAAzB,aACA,wBAAID,QAAStC,EAAU0B,QAAvB,sBAEF,4BACG1B,EAAUE,KAAI,SAAAK,GAAO,OACpB,wBAAIiC,UAAWC,IAAOC,OAAQC,IAAKpC,EAAQC,IAAKD,EAAQS,WAK9D,+BACGE,EAAKhB,KAAI,gBAAGkB,EAAH,EAAGA,KAAMD,EAAT,EAASA,MAAT,OAAqBC,EAAKlB,KAAI,SAACmB,EAAKQ,GAAN,OACtC,wBAAIc,IAAKd,GACI,IAAVA,GACC,wBAAIW,UAAWC,IAAOtB,MAAOoB,QAASnB,EAAKM,QACxCP,EAAMH,MAIX,wBAAIwB,UAAWC,IAAOjB,WACpB,6BAAMH,EAAIG,WACV,yBAAKgB,UAAWC,IAAOG,gBAAiBvB,EAAII,WAA5C,gBAGDJ,EAAIjB,QAAQF,KAAI,SAACG,EAAQwB,GAAT,OACf,wBAAIW,UAAWnC,EAASoC,IAAOpC,OAASoC,IAAOI,QAASF,IAAKd,GAC1DxB,EACGA,EAAO2B,aAAac,QAAQ,GAC5B,oB,YCxFdC,EAAQ,6BAEC,qBAAO,IAAD,EAMfC,YAAe,cAJWjD,EAFX,EAEjBkD,kBAAqBC,MAFJ,IAGjBC,KACEC,aAAgBC,EAJD,EAICA,UAAWC,EAJZ,EAIYA,YA4B/B,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,+BAAQR,IAGV,4BAAKA,GACL,wDAA8BO,EAA9B,8HAAqK,kBAAC,IAAD,CAAcE,GAAOH,EAAL,2BAAhB,iCAArK,sCACA,sLAEA,kBAAC,EAAD,CAAiBtD,OAAQA,IAEzB,qJ,qBCpDN0D,EAAOC,QAAU,CAAC,OAAS,yCAAyC,UAAY,4CAA4C,eAAiB,kDAAkD,QAAU,0CAA0C,OAAS,yCAAyC,MAAQ","file":"component---src-pages-internals-benchmarks-js-018e8d3feb2d57deee22.js","sourcesContent":["import React, { useMemo } from 'react'\n\nimport styles from './benchmarks-table.module.scss'\n\nexport default ({ suites }) => {\n  const libraries = useMemo(() => {\n    const map = new Map()\n\n    for (const suite of suites) {\n      for (const result of suite.results) {\n        if (!map.has(result.library.id)) {\n          map.set(result.library.id, result.library)\n        }\n      }\n    }\n\n    return Array.from(map.values())\n      .sort((a, b) => a.name.localeCompare(b.name))\n  }, [suites])\n\n  const grid = useMemo(() => suites.map(suite => {\n    const rows = []\n\n    for (const result of suite.results) {\n      let row = rows.find(r =>\n        r.component === result.component &&\n        r.iterations === result.iterations\n      )\n\n      if (!row) {\n        row = {\n          component: result.component,\n          iterations: result.iterations,\n          results: new Array(libraries.length).fill(null)\n        }\n\n        rows.push(row)\n      }\n\n      const index = libraries.findIndex(l => l.id === result.library.id)\n\n      if (index > -1) {\n        row.results[index] = {\n          averageValue: result.times.reduce((a, b) => a + b) / result.times.length,\n          values: result.times\n        }\n      }\n    }\n\n    return {\n      rows: rows\n        .map(row => ({\n          ...row,\n          component: row.component.toLowerCase(),\n          iterations: row.iterations.toLocaleString({\n            useGrouping: true\n          })\n        }))\n        .sort((a, b) => a.component.localeCompare(b.component)),\n      suite\n    }\n  }).sort((a, b) => a.suite.name.localeCompare(b.suite.name)), [libraries, suites])\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th colSpan={2} rowSpan={2}>Benchmark</th>\n          <th colSpan={libraries.length}>Average time (ms)</th>\n        </tr>\n        <tr>\n          {libraries.map(library =>\n            <th className={styles.column} key={library.id}>{library.name}</th>\n          )}\n        </tr>\n      </thead>\n\n      <tbody>\n        {grid.map(({ rows, suite }) => rows.map((row, index) =>\n          <tr key={index}>\n            {index === 0 &&\n              <th className={styles.suite} rowSpan={rows.length}>\n                {suite.name}\n              </th>\n            }\n\n            <td className={styles.component}>\n              <div>{row.component}</div>\n              <div className={styles.iterationCount}>{row.iterations} iterations</div>\n            </td>\n\n            {row.results.map((result, index) =>\n              <td className={result ? styles.result : styles.missing} key={index}>\n                {result\n                  ? result.averageValue.toFixed(3)\n                  : 'n/a'\n                }\n              </td>\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport BenchmarksTable from '../../components/benchmarks/benchmarks-table'\nimport ExternalLink from '../../components/site/external-link'\n\nconst title = 'Performance and benchmarks'\n\nexport default () => {\n  const {\n    allBenchmarkSuite: { nodes: suites },\n    site: {\n      siteMetadata: { githubUrl, projectName }\n    }\n  } = useStaticQuery(graphql`\n    query {\n      allBenchmarkSuite {\n        nodes {\n          id\n          name\n          results {\n            component\n            iterations\n            library {\n              id\n              name\n            }\n            times\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          githubUrl\n          projectName\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n\n      <h1>{title}</h1>\n      <p>To ensure that changes to {projectName} don’t introduce major performance regressions (and to highlight areas where performance could be improved), we maintain a <ExternalLink to={`${githubUrl}/tree/master/benchmarks`}>set of rudimentary benchmarks</ExternalLink> to test serialization throughput.</p>\n      <p>Each benchmark runs five times, and we take the average time of those runs. These results were collected on a 2017 MacBook Pro (3.1 GHz Intel Core i5):</p>\n\n      <BenchmarksTable suites={suites} />\n\n      <p>In the future, we’re hoping to expand the benchmarks to test more complex situations as well as non-.NET libraries.</p>\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"benchmarks-table-module--column--2IQkE\",\"component\":\"benchmarks-table-module--component--1XU-K\",\"iterationCount\":\"benchmarks-table-module--iteration-count--rxrQj\",\"missing\":\"benchmarks-table-module--missing--1wj04\",\"result\":\"benchmarks-table-module--result--3Je3L\",\"suite\":\"benchmarks-table-module--suite--2dfGn\"};"],"sourceRoot":""}