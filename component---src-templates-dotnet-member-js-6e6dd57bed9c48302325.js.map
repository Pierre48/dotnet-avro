{"version":3,"sources":["webpack:///./src/components/dotnet/inheritance-table.js","webpack:///./src/components/dotnet/member-detail.js","webpack:///./src/components/dotnet/overload-table.js","webpack:///./src/templates/dotnet-member.js","webpack:///./src/components/dotnet/overload-table.module.scss","webpack:///./src/components/dotnet/inheritance-table.module.scss"],"names":["member","object","type","assembly","base","interfaces","namespace","signature","typeSignatures","memberSignatures","find","s","language","typeParameters","map","p","name","className","styles","table","id","value","length","index","key","rowSpan","exceptions","kind","parameters","remarks","returns","summary","typeParameterNames","methodTypeParameterNames","xml","parameter","methodTypeParameters","exception","overloads","overload","query","dotnetMember","data","Helmet","to","title","module","exports"],"mappings":"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","file":"component---src-templates-dotnet-member-js-6e6dd57bed9c48302325.js","sourcesContent":["import React from 'react'\n\nimport Highlight from '../code/highlight'\nimport DotnetReference from '../references/dotnet'\n\nimport styles from './inheritance-table.module.scss'\n\nexport default ({ member, type }) => {\n  const object = type || member\n\n  const { assembly, base, interfaces, namespace } = object\n  const signature = (object.typeSignatures || object.memberSignatures || []).find(s => s.language === 'C#')\n  const typeParameters = (object.typeParameters || []).map(p => p.name)\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {assembly &&\n          <tr>\n            <th>Assembly</th>\n            <td>\n              <DotnetReference id={assembly.id} />\n            </td>\n          </tr>\n        }\n\n        {namespace &&\n          <tr>\n            <th>Namespace</th>\n            <td>\n              <DotnetReference id={namespace.id} />\n            </td>\n          </tr>\n        }\n\n        {signature &&\n          <tr>\n            <th>Signature</th>\n            <td>\n              <Highlight language='csharp'>{signature.value}</Highlight>\n            </td>\n          </tr>\n        }\n\n        {base &&\n          <tr>\n            <th>Base</th>\n            <td>\n              <DotnetReference id={base} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        }\n\n        {interfaces && interfaces.length > 0 && interfaces.map((id, index) =>\n          <tr key={index}>\n            {index === 0 &&\n              <th rowSpan={interfaces.length}>Interfaces</th>\n            }\n            <td>\n              <DotnetReference id={id} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  )\n}\n","import React, { Fragment } from 'react'\n\nimport DotnetReference from '../references/dotnet'\n\nimport InheritanceTable from './inheritance-table'\nimport XmlDoc from './xml-doc'\n\nexport default ({ member }) => {\n  const { exceptions, kind, parameters, remarks, returns, summary, type, typeParameters } = member\n\n  const typeParameterNames = (type.typeParameters || []).map(p => p.name)\n  const methodTypeParameterNames = (typeParameters || []).map(p => p.name)\n\n  return (\n    <>\n      {summary &&\n        <XmlDoc xml={summary} />\n      }\n\n      <InheritanceTable member={member} />\n\n      {remarks &&\n        <XmlDoc xml={remarks} />\n      }\n\n      {typeParameters && typeParameters.length > 0 &&\n        <>\n          <h3>Type parameters</h3>\n          {typeParameters.map((parameter, index) =>\n            <Fragment key={index}>\n              <h5>{parameter.name}</h5>\n              {parameter.summary && <XmlDoc xml={parameter.summary} />}\n            </Fragment>\n          )}\n        </>\n      }\n\n      {parameters && parameters.length > 0 &&\n        <>\n          <h3>Parameters</h3>\n          {parameters.map((parameter, index) =>\n            <Fragment key={index}>\n              <h5><DotnetReference id={parameter.type} typeParameters={typeParameterNames} methodTypeParameters={methodTypeParameterNames} /> {parameter.name}</h5>\n              {parameter.summary && <XmlDoc xml={parameter.summary} />}\n            </Fragment>\n          )}\n        </>\n      }\n\n      {returns &&\n        <>\n          <h3>{kind === 'method'\n            ? 'Return type'\n            : 'Type'\n          }</h3>\n          <h5><DotnetReference id={returns.type} typeParameters={typeParameterNames} methodTypeParameters={methodTypeParameterNames} /></h5>\n          {returns.summary && <XmlDoc xml={returns.summary} />}\n        </>\n      }\n\n      {exceptions && exceptions.length > 0 &&\n        <>\n          <h3>Exceptions</h3>\n          {exceptions.map((exception, index) =>\n            <Fragment key={index}>\n              <h5><DotnetReference id={exception.type} typeParameters={typeParameterNames} methodTypeParameters={methodTypeParameterNames} /></h5>\n              {exception.summary && <XmlDoc xml={exception.summary} />}\n            </Fragment>\n          )}\n        </>\n      }\n    </>\n  )\n}\n","import React, { Fragment } from 'react'\n\nimport DotnetReference from '../references/dotnet'\n\nimport MemberDetail from './member-detail'\nimport XmlDoc from './xml-doc'\n\nimport styles from './overload-table.module.scss'\n\nexport default ({ member }) =>\n  <>\n    <table className={styles.table}>\n      <tbody>\n        {member.overloads.map(overload =>\n          <tr key={overload.id}>\n            <th><DotnetReference id={overload.id} /></th>\n            <td>{overload.summary && <XmlDoc xml={overload.summary} />}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n\n    {member.overloads.map(overload =>\n      <Fragment key={overload.id}>\n        <h3><DotnetReference id={overload.id} /></h3>\n        <MemberDetail key={overload.id} member={{ ...member, ...overload }} />\n      </Fragment>\n    )}\n  </>\n","import { Link, graphql } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport MemberDetail from '../components/dotnet/member-detail'\nimport OverloadTable from '../components/dotnet/overload-table'\nimport DotnetReference from '../components/references/dotnet'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport styles from './dotnet.module.scss'\n\nexport default ({ data: { dotnetMember }}) => {\n  const { kind, name, overloads, type } = dotnetMember\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${kind === 'constructor' ? type.name : name} ${kind}`}</title>\n      </Helmet>\n\n      <Breadcrumb>\n        <Link to='/api'>API reference</Link>\n        <DotnetReference id={type.namespace.id}>\n          <code>{type.namespace.name}</code> namespace\n        </DotnetReference>\n        <DotnetReference id={type.id}>\n          <code>{type.name}</code> {type.kind}\n        </DotnetReference>\n      </Breadcrumb>\n\n      <h1 className={styles.title}>\n        <code>{kind === 'constructor' ? type.name : name}</code> {kind}\n      </h1>\n\n      {overloads.length === 1\n        ? <MemberDetail member={{ ...dotnetMember, ...overloads[0] }} />\n        : <OverloadTable member={dotnetMember} />\n      }\n    </>\n  )\n}\n\nexport const query = graphql`\n  query DotnetMemberDetailQuery($id: String!) {\n    dotnetMember(id: { eq: $id }) {\n      id\n      kind\n      name\n      overloads {\n        id\n        base\n        exceptions {\n          summary\n          type\n        }\n        memberSignatures {\n          language\n          value\n        }\n        parameters {\n          name\n          summary\n          type\n        }\n        remarks\n        returns {\n          summary\n          type\n        }\n        summary\n        typeParameters {\n          name\n          summary\n        }\n      }\n      type {\n        id\n        kind\n        name\n        namespace {\n          id\n          name\n        }\n        typeParameters {\n          name\n        }\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"overload-table-module--table--Mypp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"inheritance-table-module--table--1QN2q\"};"],"sourceRoot":""}