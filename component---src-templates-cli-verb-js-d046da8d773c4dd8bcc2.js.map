{"version":3,"sources":["webpack:///./utilities/array.js","webpack:///./src/templates/cli-verb.js","webpack:///./src/components/site/breadcrumb.module.scss","webpack:///./src/components/site/breadcrumb.js","webpack:///./src/templates/cli.module.scss"],"names":["module","exports","groupBy","list","key","reduce","map","item","k","has","set","get","push","Map","join","separator","result","index","array","length","cliVerb","data","name","to","className","styles","title","summary","examples","example","id","language","body","options","Array","from","option","abbreviation","query","children","others","isArray","breadcrumb","child"],"mappings":"+EAoDAA,EAAOC,QAAU,CACfC,QAvCF,SAAkBC,EAAMC,GACtB,OAAOD,EAAKE,QAAO,SAACC,EAAKC,GACvB,IAAMC,EAAID,EAAKH,GAMf,OALKE,EAAIG,IAAIF,EAAKH,KAChBE,EAAII,IAAIF,EAAG,IAGbF,EAAIK,IAAIH,GAAGI,KAAKL,GACTD,IACN,IAAIO,MA8BEC,KAbX,SAAeX,EAAMY,GACnB,OAAOZ,EAAKE,QAAO,SAACW,EAAQT,EAAMU,EAAOC,GAOvC,OANAF,EAAOJ,KAAKL,GAERU,EAAQC,EAAMC,OAAS,GACzBH,EAAOJ,KAAKG,GAGPC,IACN,O,oCCjDL,uJAWe,0BAAWI,EAAX,EAAGC,KAAQD,QAAX,OACb,oCACE,kBAAC,IAAD,KACE,8CAAuBA,EAAQE,OAGjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,QAAT,kBAGF,wBAAIC,UAAWC,IAAOC,OACpB,8BAAON,EAAQE,OAGjB,2BAAIF,EAAQO,SAEXP,EAAQQ,SAAST,OAAS,GACzB,oCACE,wCAECC,EAAQQ,SAAStB,KAAI,SAAAuB,GAAO,OAC3B,kBAAC,WAAD,CAAUzB,IAAKyB,EAAQC,IACrB,4BAAKD,EAAQH,OACb,kBAAC,IAAD,CAAWK,SAAUF,EAAQE,UAAWF,EAAQG,WAMvDZ,EAAQa,QAAQd,OAAS,GACxB,oCACE,uCACCe,MAAMC,KAAKjC,kBAAQkB,EAAQa,QAAS,QAAQ3B,KAAI,SAACI,EAAKO,GAAN,OAC/C,kBAAC,WAAD,CAAUb,IAAKa,GACZP,EAAI,IACH,4BAAKA,EAAI,IAGVA,EAAI,GAAGS,OAAS,GACf,4BACGT,EAAI,GAAGJ,KAAI,SAAA8B,GAAM,OAChB,kBAAC,WAAD,CAAUhC,IAAKgC,EAAON,IACpB,4BACE,8BACGM,EAAOC,cAAP,IAA2BD,EAAOC,aAAlC,KADH,KAEQD,EAAOd,OAGjB,4BACGc,EAAOT,qBAYvB,IAAMW,EAAK,c,qBCvElBtC,EAAOC,QAAU,CAAC,WAAa,yC,4FCGhB,gBAA8B,IAA3BsC,EAA0B,EAA1BA,SAAaC,EAAa,4BAC1C,GAAKD,EAQL,OAJKL,MAAMO,QAAQF,KACjBA,EAAW,CAACA,IAIZ,sCAAIf,UAAWC,IAAOiB,YAAgBF,GACnCD,EAASjC,KAAI,SAACqC,EAAO1B,GAAR,OACZ,wBAAIb,IAAKa,GAAQ0B,S,qBCfzB3C,EAAOC,QAAU,CAAC,MAAQ","file":"component---src-templates-cli-verb-js-d046da8d773c4dd8bcc2.js","sourcesContent":["/**\n * Groups an array of objects by property.\n *\n * @param {TValue[]} list\n * An array.\n *\n * @param {string} key\n * The name of a property to use as a key.\n *\n * @returns {Map<TKey, TValue[]>}\n * A map of keys to groups.\n *\n * @template TKey, TValue\n */\nfunction groupBy (list, key) {\n  return list.reduce((map, item) => {\n    const k = item[key]\n    if (!map.has(item[key])) {\n      map.set(k, [])\n    }\n\n    map.get(k).push(item)\n    return map\n  }, new Map())\n}\n\n/**\n * Separates items in an array.\n *\n * @param {T[]} list\n * An array.\n *\n * @param {U} separator\n * An item to insert between all elements in the array.\n *\n * @returns {(T|U)[]}\n * An array.\n *\n * @template T, U\n */\nfunction join (list, separator) {\n  return list.reduce((result, item, index, array) => {\n    result.push(item)\n\n    if (index < array.length - 1) {\n      result.push(separator)\n    }\n\n    return result\n  }, [])\n}\n\nmodule.exports = {\n  groupBy, join\n}\n","import { Link, graphql } from 'gatsby'\nimport React, { Fragment } from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../components/code/highlight'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport { groupBy } from '../../utilities/array'\n\nimport styles from './cli.module.scss'\n\nexport default ({ data: { cliVerb } }) =>\n  <>\n    <Helmet>\n      <title>{`dotnet avro ${cliVerb.name}`}</title>\n    </Helmet>\n\n    <Breadcrumb>\n      <Link to='/cli'>CLI reference</Link>\n    </Breadcrumb>\n\n    <h1 className={styles.title}>\n      <code>{cliVerb.name}</code>\n    </h1>\n\n    <p>{cliVerb.summary}</p>\n\n    {cliVerb.examples.length > 0 &&\n      <>\n        <h3>Examples</h3>\n\n        {cliVerb.examples.map(example =>\n          <Fragment key={example.id}>\n            <h5>{example.title}</h5>\n            <Highlight language={example.language}>{example.body}</Highlight>\n          </Fragment>\n        )}\n      </>\n    }\n\n    {cliVerb.options.length > 0 &&\n      <>\n        <h3>Options</h3>\n        {Array.from(groupBy(cliVerb.options, 'set')).map((set, index) =>\n          <Fragment key={index}>\n            {set[0] &&\n              <h5>{set[0]}</h5>\n            }\n\n            {set[1].length > 0 &&\n              <dl>\n                {set[1].map(option =>\n                  <Fragment key={option.id}>\n                    <dt>\n                      <code>\n                        {option.abbreviation && `-${option.abbreviation}, `}\n                        {`--${option.name}`}\n                      </code>\n                    </dt>\n                    <dd>\n                      {option.summary}\n                    </dd>\n                  </Fragment>\n                )}\n              </dl>\n            }\n          </Fragment>\n        )}\n      </>\n    }\n  </>\n\nexport const query = graphql`\n  query CliVerbDetailQuery($id: String!) {\n    cliVerb(id: { eq: $id }) {\n      name\n      summary\n      examples {\n        id\n        body\n        language\n        title\n      }\n      options {\n        id\n        abbreviation\n        name\n        required\n        set\n        summary\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumb\":\"breadcrumb-module--breadcrumb--Pnrca\"};","import React from 'react'\n\nimport styles from './breadcrumb.module.scss'\n\nexport default ({ children, ...others }) => {\n  if (!children) {\n    return\n  }\n\n  if (!Array.isArray(children)) {\n    children = [children]\n  }\n\n  return (\n    <ul className={styles.breadcrumb} {...others}>\n      {children.map((child, index) =>\n        <li key={index}>{child}</li>\n      )}\n    </ul>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"cli-module--title--cgvN6\"};"],"sourceRoot":""}